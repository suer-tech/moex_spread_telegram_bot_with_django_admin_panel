def write_signal_to_file(signal, signal_txt):
    with open('sig_proc.txt', 'a', encoding='utf-8') as file:
        file.write(signal + '\n')
    with open(signal_txt, 'w') as file:
        pass


# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è x –∏–∑ —Ñ–∞–π–ª–∞ usd_tvh.txt
def read_x_from_file(tvh_txt):
    try:
        with open(tvh_txt, 'r') as file:
            x = float(file.read())
        return x
    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        return None


def read_firstspread_and_signal_from_file(tvh_txt):
    try:
        with open(tvh_txt, 'r') as file:
            data = file.read().split(', ')
            values = [float(value) for value in data]
            return values
    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º
        return None



# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è y –∏–∑ —Ñ–∞–π–ª–∞ usd_signal.txt
def read_y_from_file(signal_txt):
    try:
        with open(signal_txt, 'r') as file:
            y = float(file.read())
        return y
    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        return None

def check_signal(curr, spread_txt, tvh_txt, signal_txt):
    with open(spread_txt, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    for line in lines:
        if "–°–ø—Ä–µ–¥" in line:
            parts = line.split()
            x_index = parts.index('–°–ø—Ä–µ–¥') + 4
            spread = parts[x_index]
    z = float(spread)  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è z
    if read_x_from_file(tvh_txt) is not None and read_y_from_file(signal_txt) is not None:
        x = float(read_x_from_file(tvh_txt))  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è x
        y = float(read_y_from_file(signal_txt))  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è y

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
        if z >= x + x / 100 * y:
            bell_emoji = "üîî"
            signal = f"{bell_emoji}{curr}: —Å–ø—Ä–µ–¥ –≤—ã—Ä–æ—Å –Ω–∞ {y}%"
            write_signal_to_file(signal, signal_txt)
        elif z <= x - x / 100 * y:
            bell_emoji = "üîî"
            signal = f"{bell_emoji}{curr}: —Å–ø—Ä–µ–¥ —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ {y}%"
            write_signal_to_file(signal, signal_txt)


def check_only_signal(curr, spread_txt, signal_txt):
    with open(spread_txt, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    for line in lines:
        if "–°–ø—Ä–µ–¥" in line:
            parts = line.split()
            x_index = parts.index('–°–ø—Ä–µ–¥') + 4
            spread = parts[x_index]
    z = float(spread)  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è z
    if read_firstspread_and_signal_from_file(signal_txt) is not None:
        x = read_firstspread_and_signal_from_file(signal_txt) # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è y


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
        if float(x[0]) < float(x[1]):
            if z >= float(x[1]):
                bell_emoji = "üîî"
                signal = f"{bell_emoji}{curr}: —Å–ø—Ä–µ–¥ –≤—ã—Ä–æ—Å –¥–æ {x[1]}"
                write_signal_to_file(signal, signal_txt)
        elif  float(x[0]) > float(x[1]):
            if z <= float(x[1]):
                bell_emoji = "üîî"
                signal = f"{bell_emoji}{curr}: —Å–ø—Ä–µ–¥ —Å–Ω–∏–∑–∏–ª—Å—è –¥–æ {x[1]}"
                write_signal_to_file(signal, signal_txt)


check_signal('USD', 'usd.txt', 'usd_tvh.txt', 'usd_signal.txt')
check_signal('EUR', 'eur.txt', 'eur_tvh.txt', 'eur_signal.txt')
check_signal('CNY', 'cny.txt', 'cny_tvh.txt', 'cny_signal.txt')
check_signal('USD', 'usd.txt', 'usd_spread_only.txt', 'usd_signal_only.txt')
check_signal('EUR', 'eur.txt', 'eur_spread_only.txt', 'eur_signal_only.txt')
check_signal('CNY', 'cny.txt', 'cny_spread_only.txt', 'cny_signal_only.txt')
check_only_signal('USD', 'usd.txt', 'usd_firstspread_and_signal.txt')
check_only_signal('EUR', 'eur.txt', 'eur_firstspread_and_signal.txt')
check_only_signal('CNY', 'cny.txt', 'cny_firstspread_and_signal.txt')

check_signal('MGNT', 'mgnt.txt', 'mgnt_tvh.txt', 'mgnt_signal.txt')
check_signal('MGNT', 'mgnt.txt', 'mgnt_spread_only.txt', 'mgnt_signal_only.txt')
check_only_signal('MGNT', 'mgnt.txt', 'mgnt_firstspread_and_signal.txt')
